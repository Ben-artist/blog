import{_ as i,c as a,o as l,a5 as n,aV as h,aW as t,aX as e,aY as p,aZ as k,a_ as r,a$ as d,b0 as o,b1 as g}from"./chunks/framework.DPO_DQk3.js";const _=JSON.parse('{"title":"浏览器渲染中的合成层（Composite Layers）详解","description":"深入浅出地讲解浏览器渲染中的合成层，帮助开发者更好地理解和利用这一机制来优化网页性能。","frontmatter":{"title":"浏览器渲染中的合成层（Composite Layers）详解","date":"2025-03-14T00:00:00.000Z","tags":["浏览器渲染","合成层","性能优化","GPU加速"],"description":"深入浅出地讲解浏览器渲染中的合成层，帮助开发者更好地理解和利用这一机制来优化网页性能。"},"headers":[],"relativePath":"posts/composite-layers.md","filePath":"posts/composite-layers.md"}'),c={name:"posts/composite-layers.md"};function y(A,s,m,B,f,C){return l(),a("div",null,s[0]||(s[0]=[n('<p>浏览器与前端开发的关系不言而喻，而了解浏览器的渲染原理，可以帮助我们提升页面性能，解决一些渲染上的问题。本文将深入探讨浏览器渲染中的合成层机制，以及如何正确使用GPU加速来优化网页性能。</p><hr><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to “问题描述”">​</a></h2><p>最近在开发一个移动端 H5 页面的时候，就遇到一个奇怪的问题，有一个榜单页面在最新版本 IOS 手机上切换 tab 的时候，左上角的倒计时出现闪烁，我们来看一些效果。</p><p><img src="'+h+'" alt="问题描述"></p><p>大概的代码结构</p><p><img src="'+t+'" alt="代码结构"></p><p>通过插件查看了一下 DOM 结构正常，样式也和其他手机上一致，那问题出在哪里呢？我想大概率是最新版本 IOS 浏览器渲染的问题。说到这种渲染问题，我第一时间想到的就是用 GPU 渲染提升为合成层试试，于是我给倒计时的 DOM 加上了简短的一行代码 <code>will-change: transform</code>，问题顺利解决，倒计时模块的渲染不再受其他内容的影响。为啥加了这段代码就是用 GPU 渲染，并且提升为合成层呢？以及合成层是什么？让我们一起来看看吧。</p><h2 id="浏览器渲染流程" tabindex="-1">浏览器渲染流程 <a class="header-anchor" href="#浏览器渲染流程" aria-label="Permalink to “浏览器渲染流程”">​</a></h2><p>在讨论合成层之前，我们需要先了解浏览器的基本渲染流程：</p><ol><li><strong>解析 HTML</strong>：将 HTML 解析成 DOM 树</li><li><strong>解析 CSS</strong>：将 CSS 解析成 CSSOM 树</li><li><strong>构建渲染树</strong>：将 DOM 和 CSSOM 合并成渲染树（Render Tree）</li><li><strong>布局（Layout）</strong>：计算每个节点在屏幕上的确切位置和大小</li><li><strong>绘制（Paint）</strong>：将渲染树中的各个节点绘制成实际的像素</li><li><strong>合成（Composite）</strong>：将各个图层合成为最终的页面</li></ol><p><img src="'+e+'" alt="浏览器渲染流程"></p><p>其中，最后的合成阶段就是本文要重点讨论的内容。</p><h2 id="什么是合成层" tabindex="-1">什么是合成层？ <a class="header-anchor" href="#什么是合成层" aria-label="Permalink to “什么是合成层？”">​</a></h2><p>合成层（Composite Layers）是浏览器渲染引擎中的一个概念，它将页面分成多个图层，并且可以单独地对这些图层进行绘制和合成，从而形成最终的页面。</p><p>简单来说，浏览器会将页面中某些特定的元素提升为单独的图层，这些图层会被单独绘制，然后再按照正确的顺序合成到一起，形成最终的页面图像。</p><p><img src="'+p+'" alt="合成层"></p><p>如何去观察页面的图层结构呢，您需要在 Chrome 开发工具中打开自定义菜单，然后在 More tools 中选择 Layers 选项。</p><p><img src="'+k+'" alt="查看图层结构"></p><p>这样你就可以观察页面的图层结构了</p><p><img src="'+r+'" alt="图层结构"></p><p>一般来说，拥有一些特定属性的渲染层，会被浏览器自动提升为合成层。合成层拥有单独的图层（GraphicsLayer），和其他图层之间互不影响。而其它不是合成层的渲染层，则和第一个拥有图层的父层共用一个，也就是普通文档流中的内容。</p><h2 id="合成层的工作原理" tabindex="-1">合成层的工作原理 <a class="header-anchor" href="#合成层的工作原理" aria-label="Permalink to “合成层的工作原理”">​</a></h2><p>让我们深入了解一下合成层是如何工作的。这对于理解为什么某些动画比其他动画更流畅至关重要。</p><h3 id="gpu是一个独立的计算单元" tabindex="-1">GPU是一个独立的计算单元 <a class="header-anchor" href="#gpu是一个独立的计算单元" aria-label="Permalink to “GPU是一个独立的计算单元”">​</a></h3><p>首先，需要理解的是，<strong>GPU实际上是一个独立的计算单元</strong>。它有自己的处理器和内存，与CPU是分开的。当浏览器使用GPU进行渲染时，它需要将数据从CPU传输到GPU，这个过程类似于AJAX请求：需要准备数据，发送请求，然后等待响应。</p><p>这意味着，每次我们创建一个新的合成层，浏览器都需要：</p><ol><li>为每个合成层绘制单独的图像</li><li>准备图层数据（大小、位置、透明度等）</li><li>准备动画的着色器（如果适用）</li><li>将数据发送到GPU</li></ol><p>这个过程是有成本的，尤其是当页面上有大量合成层或者合成层很大时。</p><h3 id="合成层的优势" tabindex="-1">合成层的优势 <a class="header-anchor" href="#合成层的优势" aria-label="Permalink to “合成层的优势”">​</a></h3><p>尽管创建合成层有成本，但它们提供了显著的性能优势：</p><ol><li><strong>硬件加速</strong>：合成层使用GPU进行渲染，这对于图形处理任务来说非常高效。</li><li><strong>独立处理</strong>：对一个合成层的修改不会影响其他层，减少了重绘的范围。</li><li><strong>亚像素精度</strong>：GPU可以提供亚像素级别的精确渲染，使动画更加平滑。</li><li><strong>CPU解放</strong>：动画在GPU上运行，即使CPU在执行密集任务，动画也能保持流畅。</li></ol><h3 id="哪些css属性会触发合成层" tabindex="-1">哪些CSS属性会触发合成层？ <a class="header-anchor" href="#哪些css属性会触发合成层" aria-label="Permalink to “哪些CSS属性会触发合成层？”">​</a></h3><p>不是所有的CSS属性都能有效利用GPU加速。要使动画能够在合成层上高效运行，CSS属性必须：</p><ol><li>不影响文档流</li><li>不依赖文档流</li><li>不导致重绘</li></ol><p>实际上，只有少数CSS属性满足这些条件：</p><ul><li><strong>transform</strong>：特别是3D变换如<code>translateZ()</code>或<code>translate3d()</code></li><li><strong>opacity</strong>：改变元素的透明度</li><li><strong>filter</strong>：某些滤镜效果</li><li><strong>will-change</strong>：当值为<code>transform</code>或<code>opacity</code>时</li></ul><p>其他常见的动画属性如<code>left</code>、<code>top</code>、<code>width</code>、<code>height</code>等都会触发布局（reflow）和重绘（repaint），无法有效利用GPU加速。</p><h2 id="常见的提升为合成层的条件" tabindex="-1">常见的提升为合成层的条件 <a class="header-anchor" href="#常见的提升为合成层的条件" aria-label="Permalink to “常见的提升为合成层的条件”">​</a></h2><p>以下是一些常见的会导致元素形成合成层的条件：</p><ul><li>设置 <code>transform: translateZ(0)</code> 或 <code>transform: translate3d(0,0,0)</code></li><li>使用 <code>will-change: transform</code> 或 <code>will-change: opacity</code></li><li><code>&lt;video&gt;</code>、<code>&lt;canvas&gt;</code>、<code>&lt;iframe&gt;</code> 等元素</li><li>设置 <code>position: fixed</code></li><li>设置 <code>backface-visibility: hidden</code></li><li>元素的 <code>opacity</code> 值小于1</li><li>使用CSS滤镜（filter）</li></ul><h2 id="隐式合成的陷阱" tabindex="-1">隐式合成的陷阱 <a class="header-anchor" href="#隐式合成的陷阱" aria-label="Permalink to “隐式合成的陷阱”">​</a></h2><p>除了显式地创建合成层，浏览器有时会&quot;隐式&quot;地将元素提升为合成层。这通常发生在以下情况：</p><h3 id="堆叠顺序导致的隐式合成" tabindex="-1">堆叠顺序导致的隐式合成 <a class="header-anchor" href="#堆叠顺序导致的隐式合成" aria-label="Permalink to “堆叠顺序导致的隐式合成”">​</a></h3><p>当一个或多个非合成元素应出现在堆叠顺序上的合成元素之上时，这些元素会被隐式地提升为合成层。</p><p><img src="'+d+'" alt="隐式合成"><img src="'+o+'" alt="隐式合成"></p><p>在上图中，只是因为z-index的变化，元素B被隐式地提升为合成层。但如果我们调整B的位置，确保B与C、D没有重叠，那么B就不会被提升为合成层：</p><p><img src="'+g+`" alt="隐式合成"></p><p>这种隐式合成可能导致&quot;层爆炸&quot;（Layer Explosion）问题，即页面上出现大量不必要的合成层，消耗大量内存并降低性能。</p><h2 id="合成层的性能考量" tabindex="-1">合成层的性能考量 <a class="header-anchor" href="#合成层的性能考量" aria-label="Permalink to “合成层的性能考量”">​</a></h2><p>使用合成层并不总是能提高性能，有时甚至会适得其反。以下是一些需要考虑的因素：</p><h3 id="_1-内存消耗" tabindex="-1">1. 内存消耗 <a class="header-anchor" href="#_1-内存消耗" aria-label="Permalink to “1. 内存消耗”">​</a></h3><p>每个合成层都需要在GPU内存中存储一个位图。对于大型元素或大量元素，这可能导致显著的内存消耗。</p><p>例如，一个500×500像素的元素作为合成层需要约977KB的内存（500×500×4字节）。在高分辨率屏幕上，这个数字会更大。</p><h3 id="_2-cpu到gpu的数据传输" tabindex="-1">2. CPU到GPU的数据传输 <a class="header-anchor" href="#_2-cpu到gpu的数据传输" aria-label="Permalink to “2. CPU到GPU的数据传输”">​</a></h3><p>每次创建或更新合成层时，数据都需要从CPU传输到GPU。这个过程有开销，尤其是对于频繁变化的大型合成层。</p><h3 id="_3-层爆炸问题" tabindex="-1">3. 层爆炸问题 <a class="header-anchor" href="#_3-层爆炸问题" aria-label="Permalink to “3. 层爆炸问题”">​</a></h3><p>如前所述，隐式合成可能导致层爆炸，创建大量不必要的合成层。</p><h2 id="实际优化案例" tabindex="-1">实际优化案例 <a class="header-anchor" href="#实际优化案例" aria-label="Permalink to “实际优化案例”">​</a></h2><p>让我们看一个实际的优化案例，展示如何正确使用合成层来提高性能。</p><p>假设我们有一个旋转的太阳光芒效果，初始实现是将整个太阳作为一个大图像，然后使用CSS动画旋转它：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 500</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 500</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  background</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sun.png</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  animation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> rotate </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">s</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> linear</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> infinite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">keyframes</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rotate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  from</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> transform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> rotate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">deg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  to</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> transform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> rotate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">360</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">deg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>这种实现有两个问题：</p><ol><li>太阳图像很大，网络传输成本高</li><li>整个太阳作为一个合成层，包含了大量空白区域，浪费GPU内存</li></ol><p>更好的实现是只使用单个光芒图像，然后通过CSS创建多个光芒并分别旋转它们：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> relative</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 500</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 500</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ray</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> absolute</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  top</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  left</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 250</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 40</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  background</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ray.png</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  transform-origin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ray</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">nth-child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> transform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> rotate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">deg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ray</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">nth-child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> transform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> rotate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">30</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">deg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* ... 其他光芒 ... */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">keyframes</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rotate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  from</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> transform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> rotate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">deg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  to</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> transform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> rotate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">360</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">deg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>这种实现的优势：</p><ol><li>网络传输的数据量大大减少</li><li>GPU内存使用更高效，只存储实际的光芒图像，而不是整个区域</li><li>动画性能更好，因为每个光芒都是一个小的合成层</li></ol><h2 id="合成层的最佳实践" tabindex="-1">合成层的最佳实践 <a class="header-anchor" href="#合成层的最佳实践" aria-label="Permalink to “合成层的最佳实践”">​</a></h2><p>基于以上讨论，以下是使用合成层的一些最佳实践：</p><h3 id="_1-谨慎使用合成层" tabindex="-1">1. 谨慎使用合成层 <a class="header-anchor" href="#_1-谨慎使用合成层" aria-label="Permalink to “1. 谨慎使用合成层”">​</a></h3><p>不要盲目地为元素添加<code>transform: translateZ(0)</code>或<code>will-change: transform</code>。只在真正需要GPU加速的元素上使用这些属性。</p><h3 id="_2-控制合成层的大小和数量" tabindex="-1">2. 控制合成层的大小和数量 <a class="header-anchor" href="#_2-控制合成层的大小和数量" aria-label="Permalink to “2. 控制合成层的大小和数量”">​</a></h3><p>尽量减小合成层的尺寸，并控制页面上合成层的数量。对于大型元素，考虑是否真的需要将整个元素提升为合成层，或者可以只提升需要动画的部分。</p><h3 id="_3-使用devtools监控合成层" tabindex="-1">3. 使用DevTools监控合成层 <a class="header-anchor" href="#_3-使用devtools监控合成层" aria-label="Permalink to “3. 使用DevTools监控合成层”">​</a></h3><p>使用Chrome DevTools的Layers面板监控页面上的合成层，检查是否有不必要的合成层或过大的合成层。</p><h3 id="_4-避免隐式合成" tabindex="-1">4. 避免隐式合成 <a class="header-anchor" href="#_4-避免隐式合成" aria-label="Permalink to “4. 避免隐式合成”">​</a></h3><p>注意元素的堆叠顺序，避免因为z-index和重叠导致的隐式合成。如果必须使用z-index，尝试调整元素位置避免不必要的重叠。</p><h3 id="_5-提前规划动画和交互" tabindex="-1">5. 提前规划动画和交互 <a class="header-anchor" href="#_5-提前规划动画和交互" aria-label="Permalink to “5. 提前规划动画和交互”">​</a></h3><p>在设计阶段就考虑哪些元素需要动画，如何组织DOM结构以最小化合成层的数量和大小。与设计师和客户沟通，确保动画效果既美观又高效。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><p>合成层是现代浏览器渲染过程中的重要机制，它通过将页面分层并利用GPU加速来提高渲染性能。正确使用合成层可以显著提升动画和交互的流畅度，但过度使用或不当使用也会带来性能问题。</p><p>理解合成层的工作原理、触发条件以及性能影响，可以帮助我们做出更明智的决策，在视觉效果和性能之间找到平衡点。记住，<code>transform: translateZ(0)</code>和<code>will-change: transform</code>不是万能的性能优化魔法，而是需要谨慎使用的工具。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to “参考资料”">​</a></h2><ol><li><a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/" target="_blank" rel="noreferrer">CSS GPU Animation: Doing It Right</a></li><li><a href="https://juejin.cn/post/7047006440623439880" target="_blank" rel="noreferrer">浏览器层合成与页面渲染优化</a></li><li><a href="https://www.chromium.org/developers/design-documents/compositor-thread-architecture/" target="_blank" rel="noreferrer">Compositor and Rendering Pipeline - Chrome Developers</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Tools/Performance/Scenarios/Animating_CSS_properties" target="_blank" rel="noreferrer">Layers - MDN Web Docs</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change" target="_blank" rel="noreferrer">CSS will-change - MDN Web Docs</a></li></ol>`,85)]))}const P=i(c,[["render",y]]);export{_ as __pageData,P as default};
